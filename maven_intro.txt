<h1>Maven</h1>
A lot of this is taken from the Apache Maven site (http://maven.apache.org).

Apache Maven is the build tool of choice that we use at 42Six for building our Java projects.
It is based on the concept of a project object model, and stresses convention over configuration.

<h2>Why Maven?</h2>
One of the primary reasons that we use maven is that its dependency management is handled by placing
dependencies into a 'repository' which is generally on a network somewhere.  Maven will then 
download the dependcies, on your local machine in your home directory located at ~/.m2/repository/

<h2>Maven Project Structure</h2>
When you create a maven source project the folder structure will generally look like the following:

pom.xml (the file which controls the build)
 |
 |- -> src/
        |
        |- -> main
        |      |
        |      |- - > java
        |              |
        |              |- -> (java package goes here)
        |                    |
        |                    |- -> (java source files go here)
        |
        |
        |- ->test
              |
              |- ->java
                    |
                    |- -> (java package goes here)
                            |
                            |- -> (java source files go here)


<h2>POM File</h2>
A POM file is a detailed configuration used by maven to build a project.  It can also define the goals
that will be executed.  A sample pom.xml follows as well is attached to this project.  The 
various comments in the sample pom attached with the project will explain what the different 
sections do.

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>inveniet</groupId>
  <artifactId>inveniet-query</artifactId>
  <version>0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>inveniet-query</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <repositories>
    <repository>
        <id>fourtwosix.nexus</id>
        <name>42Six Nexus</name>
        <url>http://build01:8082/nexus/content/groups/public/</url>
    </repository>
    <repository>
        <id>fourtwosix.nexus.snapshots</id>
        <name>42Six Nexus Snapshots</name>
        <url>http://build01.42six.com:8082/nexus/content/repositories/snapshots</url>
    </repository>
    <repository>
        <id>fourtwosix.nexus.releases</id>
        <name>42Six Nexus Releases</name>
        <url>http://build01.42six.com:8082/nexus/content/repositories/releases</url>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>


tags and there meanings:

project: *REQUIRED BY ALL POM FILES* is the top level element in all maven pom.xml files
modelVersion: *REQUIRED BY ALL POM FILES* indicates what version of the POM model that maven is using
groupId: a unique identifier of the orgrnization that creates the project (we generally use our top level project name)
artifactId: *REQUIRED BY ALL POM FILES* indicates the name of the artifact which is being generated
version: indicates the version of the artifact that is going to be generated by the build
name: display named of the project (Mostly used by IDEs)
repositories: Top level tag which tells maven additional repositories to look at when trying to resolve dependencies
dependencies: Other Maven projects which your project depends upon

For more information on a POM file visit: http://maven.apache.org/guides/introduction/introduction-to-the-pom.html  

<h2>Maven Build Lifecycles</h2>
The build lifecycle is the series of steps that maven will execute to build the project.  Each one
of these steps is called a phase.  The defualt build cycle used by maven is defined below.  Each 
phase will be explained after it is defined.

validate: do a quick sanity check on the project and make sure all the information required 
          to build project is available

compile: compile the source code of the project
test: test the compiled source code using the unit testing framework (JUNIT in most cases)
package: take the compiled code and package it in its distributable fomrat (JAR in most cases)
integration-test: process and deploy the package inf necessary into an environment where 
                  integration tests can be run.
verify: run any check to verify the package is valid and meets quality criteria
install: installs the package to the local repository (~/.m2/repository), this will also run 
         compile and test before hand
deploy:  publishes the built version of a project to a remote repository so it can be consumed by
         others

While not part of the default build lifecycle as this phase is always built in 'clean'
can be used to clean up your projects build.  By defualt Maven will just remove the 'target'
directory which is where it will place the output of your compile (the jar file) and the output of
your tests (target/surefire-reports/).

All of these lifecycles can be ran from the command line simply by typing 
(brackets should be omitted): mvn [phase] 
eg: mvn clean
    mvn compile
    mvn test
    mvn install

The phases can be chained together on the command line as well: mvn [phase] [phase] [phase] [phase]
eg: mvn clean compile test install


Most of the time you will just be doing: mvn clean install

For more information see: http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
